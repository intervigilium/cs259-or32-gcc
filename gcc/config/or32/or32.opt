; Options for the OR32 port of the compiler
; This file is part of GCC.
;
; Copyright (C) 2010 Embecosm Limited
;
; GCC is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 3, or (at your option) any later
; version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT ANY
; WARRANTY; without even the implied warranty of MERCHANTABILITY or
; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
; for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING3.  If not see
; <http://www.gnu.org/licenses/>.

mhard-float
Target RejectNegative Mask(HARD_FLOAT)
Use hardware floating point

msoft-float
Target RejectNegative InverseMask(HARD_FLOAT)
Do not use hardware floating point

mdouble-float
Target Report RejectNegative Mask(DOUBLE_FLOAT)
Allow hardware floating-point instructions to cover both 32-bit and 64-bit operations

mhard-div
Target RejectNegative Mask(HARD_DIV)
Use hardware division

msoft-div
Target RejectNegative InverseMask(HARD_DIV)
Do not use hardware division

mhard-mul
Target RejectNegative Mask(HARD_MUL)
Use hardware multiplication

msoft-mul
Target RejectNegative InverseMask(HARD_MUL)
Do not use hardware multiplication

msext
Target Mask(MASK_SEXT)
Use sign-extending instructions

mcmov
Target Mask(MASK_CMOV)
Use conditional move instructions

mlogue
Target Mask(SCHED_LOGUE)
Schedule prologue/epilogue

mror
Target Mask(MASK_ROR)
Emit ROR instructions

mboard=
Target RejectNegative Joined
Link with libgloss configuration suitable for this board

mnewlib
Target Report RejectNegative Var(or32_libc,or32_libc_newlib) Init(OR32_LIBC_DEFAULT)
Compile for the Linux/Gnu/newlib based toolchain

;; muclibc / mglibc are defined in linux.opt, so we can't easily re-define
;; how they are recorded.
;; We could remove linux.opt from extra_options, but that could backfire if
;; more options are added that we don't want to remove.  Hence we use
;; TARGET_HANDLE_OPTION.
muclibc
Target RejectNegative
Use uClibc

mglibc
Target RejectNegative
Use glibc (not supported)

;; provide struct padding as in previous releases.
;; Note that this will only affect STRUCTURE_SIZE_BOUNDARY, in particular
;; make 2 byte structs 4-byte alignned and sized.
;; We still use ROUND_TYPE_ALIGN to increase alignment of larger structs.
mpadstruct
Target Report RejectNegative Mask(PADSTRUCT)
Make structs a multiple of 4 bytes (warning: ABI altered)

mredzone=
Target RejectNegative Joined UInteger Var(or32_redzone) Init(128)
Set the size of the stack below sp that is assumed to be safe from interrupts.
